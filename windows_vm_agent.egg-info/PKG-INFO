Metadata-Version: 2.2
Name: windows_vm_agent
Version: 1.0.0
Summary: Dynamic Windows VM Agent for monitoring and executing actions
Home-page: https://github.com/yourusername/windows_vm_agent
Author: Your Name
Author-email: your.email@example.com
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Operating System :: Microsoft :: Windows
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: pyyaml>=6.0
Requires-Dist: requests>=2.28.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Dynamic Windows VM Agent

A configurable Windows agent that monitors for various predefined events within the VM (initially log file patterns), pulls necessary data from a central manager API when triggered, and executes corresponding predefined local scripts.

## Features

- **Configurable Event Monitoring**: Monitor log files for specific patterns using regular expressions.
- **Dynamic API Data Retrieval**: Pull data from a central manager API when events are triggered.
- **Flexible Script Execution**: Execute PowerShell scripts with parameters from API responses or event data.
- **Extensible Architecture**: Easily add new monitor types and action handlers.

## Prerequisites

- Windows 7 or later (Windows 10/11 recommended)
- Python 3.7 or later
- PowerShell 3.0 or later

## Installation

### 1. Install Python

If Python is not already installed, download and install it from [python.org](https://www.python.org/downloads/windows/).

### 2. Clone or Download the Repository

```
git clone https://github.com/yourusername/windows_vm_agent.git
cd windows_vm_agent
```

### 3. Install the Agent

```
pip install -e .
```

### 4. Create Configuration

Copy the example configuration file and modify it for your environment:

```
copy config.yaml C:\CsBotAgent\config.yaml
```

Edit the configuration file to set your API key, manager URL, and configure monitors and actions.

### 5. Create Scripts Directory

Create a directory for action scripts:

```
mkdir C:\CsBotAgent\ActionScripts
```

Copy the sample scripts from the `action_scripts` directory to this location.

## Configuration

The agent is configured using a YAML file. Here's an example configuration:

```yaml
General:
  VMIdentifier: "VM_HOSTNAME_OR_ID"  # Or fetch dynamically
  APIKey: "YOUR_SECURE_API_KEY"  # Better: Load from env var or secure store
  ManagerBaseURL: "https://your-manager.com/api"
  ScriptsPath: "C:\\CsBotAgent\\ActionScripts"

EventMonitors:
  - Name: "AccountLoginMonitor"
    Type: "LogFileTail"
    LogFilePath: "C:\\Path\\To\\CSBot\\bot.log"
    EventTriggers:
      - EventName: "AccountLoginDetected"
        # Regex to capture the account ID from a log line
        Regex: 'User logged in:\s+(?P<account_id>\w+)'
        # Action to perform when this regex matches
        Action: "UpdateProxyForAccount"

  - Name: "ErrorMonitor"
    Type: "LogFileTail"
    LogFilePath: "C:\\Path\\To\\CSBot\\error.log"
    EventTriggers:
      - EventName: "CriticalErrorDetected"
        Regex: 'CRITICAL ERROR CODE: (?P<error_code>\d+)'
        Action: "NotifyError"  # Example: Could trigger a script that POSTs to manager

Actions:
  - Name: "UpdateProxyForAccount"
    # API endpoint to call to get data needed for the script
    APIDataEndpoint: "/account-config?vm_id={VMIdentifier}&account_id={account_id}"  # Placeholders filled from event
    # Script to execute with data returned from API
    Script: "Set-Proxy.ps1"
    # Map API response fields to script parameters (case-sensitive)
    ParameterMapping:
      ProxyAddress: "proxy_server"  # Script param : API JSON key
      BypassList: "proxy_bypass"

  - Name: "NotifyError"
    # This action might not need external data, just runs a script
    Script: "Send-Notification.ps1"  # This script might contain API call logic itself
    # Map event capture groups directly to script parameters
    ParameterMapping:
      ErrorCode: "error_code"  # Script param : Regex capture group name
```

## Running the Agent

### Manual Execution

Run the agent from the command line:

```
windows-vm-agent --config C:\CsBotAgent\config.yaml
```

### Install as a Windows Service

To run the agent as a Windows service, you can use NSSM (Non-Sucking Service Manager):

1. Download NSSM from [nssm.cc](https://nssm.cc/download)
2. Install the service:

```
nssm install WindowsVMAgent "C:\Python310\python.exe" "-m windows_vm_agent.main --config C:\CsBotAgent\config.yaml"
nssm set WindowsVMAgent DisplayName "Windows VM Agent"
nssm set WindowsVMAgent Description "Dynamic Windows VM Agent for monitoring and executing actions"
nssm set WindowsVMAgent Start SERVICE_AUTO_START
nssm start WindowsVMAgent
```

## Creating Action Scripts

Action scripts are PowerShell scripts that are executed when events are triggered. They should:

1. Use the `param()` block to define parameters
2. Return exit code 0 for success, non-zero for failure
3. Include proper error handling and logging

Example script:

```powershell
param(
    [Parameter(Mandatory=$true)]
    [string]$ProxyAddress,
    
    [Parameter(Mandatory=$false)]
    [string]$BypassList = "localhost,127.0.0.1"
)

try {
    # Script logic here
    exit 0
}
catch {
    Write-Error "Error: $_"
    exit 1
}
```

## Security Considerations

- Store API keys securely (environment variables or Windows credential manager)
- Restrict access to the configuration file and scripts directory
- Validate all data received from the API before using it in scripts
- Only execute scripts from the designated scripts directory

## Troubleshooting

Logs are stored in the `logs` directory within the agent installation directory. For more verbose logging, run the agent with the `--log-level DEBUG` option.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
