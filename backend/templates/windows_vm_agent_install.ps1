# Windows VM Agent Installation Script
# This script downloads and installs the Windows VM Agent
# Generated by AccountDB

# Parameters
param(
    [string]$InstallDir = "C:\CsBotAgent",
    [string]$VMId = "{{vm_id}}",
    [string]$VMName = "{{vm_name}}",
    [string]$APIKey = "{{api_key}}",
    [string]$ServerURL = "{{server_url}}",
    [switch]$InstallAsService = $false
)

# Create a function to write colored output
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    }
    else {
        $input | Write-Output
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

# Show banner
Write-ColorOutput Green "
=============================================
Windows VM Agent Installation Script
=============================================
"

# Create installation directory
Write-Output "Creating installation directory: $InstallDir"
if (-not (Test-Path $InstallDir)) {
    New-Item -ItemType Directory -Path $InstallDir -Force | Out-Null
}

# Create subdirectories
$ScriptsDir = Join-Path $InstallDir "ActionScripts"
$LogsDir = Join-Path $InstallDir "Logs"
$ConfigPath = Join-Path $InstallDir "config.yaml"

if (-not (Test-Path $ScriptsDir)) {
    New-Item -ItemType Directory -Path $ScriptsDir -Force | Out-Null
}
if (-not (Test-Path $LogsDir)) {
    New-Item -ItemType Directory -Path $LogsDir -Force | Out-Null
}

# Check if Python is installed
$pythonInstalled = $false
try {
    $pythonVersion = python --version 2>&1
    if ($pythonVersion -match "Python 3") {
        Write-ColorOutput Green "Python 3 is already installed: $pythonVersion"
        $pythonInstalled = $true
    }
    else {
        Write-ColorOutput Yellow "Python is installed but not version 3: $pythonVersion"
    }
}
catch {
    Write-ColorOutput Yellow "Python 3 is not installed."
}

# Install Python if not installed
if (-not $pythonInstalled) {
    Write-Output "Downloading Python 3.10..."
    $pythonUrl = "https://www.python.org/ftp/python/3.10.11/python-3.10.11-amd64.exe"
    $pythonInstaller = Join-Path $env:TEMP "python-3.10.11-amd64.exe"

    try {
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Invoke-WebRequest -Uri $pythonUrl -OutFile $pythonInstaller

        Write-Output "Installing Python 3.10..."
        Start-Process -FilePath $pythonInstaller -ArgumentList "/quiet", "InstallAllUsers=1", "PrependPath=1" -Wait

        # Refresh environment variables
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")

        Write-ColorOutput Green "Python 3.10 installed successfully."
    }
    catch {
        Write-ColorOutput Red "Failed to install Python: $_"
        Write-ColorOutput Yellow "Please install Python 3.7 or later manually from https://www.python.org/downloads/windows/"
        exit 1
    }
}

# Download the Windows VM Agent files
Write-Output "Downloading Windows VM Agent files..."
$agentZipUrl = "{{download_url}}"
$agentZip = Join-Path $env:TEMP "windows_vm_agent.zip"

try {
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Invoke-WebRequest -Uri $agentZipUrl -OutFile $agentZip

    Write-Output "Extracting Windows VM Agent files..."

    # Create a temporary directory for extraction
    $tempExtractDir = Join-Path $env:TEMP "windows_vm_agent_extract"
    if (Test-Path $tempExtractDir) {
        Remove-Item -Path $tempExtractDir -Recurse -Force
    }
    New-Item -ItemType Directory -Path $tempExtractDir -Force | Out-Null

    # Extract the ZIP file
    Expand-Archive -Path $agentZip -DestinationPath $tempExtractDir -Force

    # Check if this is a GitHub repository ZIP (which has a subdirectory)
    $githubRepoDir = Get-ChildItem -Path $tempExtractDir -Directory | Select-Object -First 1
    if ($githubRepoDir) {
        Write-Output "Detected GitHub repository structure..."

        # Find the windows_vm_agent directory in the repository
        $agentSourceDir = Join-Path $githubRepoDir.FullName "windows_vm_agent"
        if (Test-Path $agentSourceDir) {
            Write-Output "Found windows_vm_agent directory in repository..."

            # Copy all files from the windows_vm_agent directory to the installation directory
            Copy-Item -Path "$agentSourceDir\*" -Destination $InstallDir -Recurse -Force
        } else {
            # If windows_vm_agent directory doesn't exist, use the repository root
            Write-Output "Using repository root as agent source..."
            Copy-Item -Path "$($githubRepoDir.FullName)\*" -Destination $InstallDir -Recurse -Force
        }
    } else {
        # If not a GitHub repository ZIP, copy all files directly
        Copy-Item -Path "$tempExtractDir\*" -Destination $InstallDir -Recurse -Force
    }

    # Clean up temporary directory
    Remove-Item -Path $tempExtractDir -Recurse -Force

    Write-ColorOutput Green "Windows VM Agent files extracted successfully."
}
catch {
    Write-ColorOutput Red "Failed to download or extract Windows VM Agent files: $_"
    exit 1
}

# Create configuration file
Write-Output "Creating configuration file..."
$configContent = @"
General:
  VMIdentifier: "$VMId"  # VM ID from Proxmox or other virtualization platform
  # API key generated during registration
  APIKey: "$APIKey"
  # Base URL for the API - should be the root URL of the server, not including /api
  # The agent will automatically try both with and without /api if needed
  ManagerBaseURL: "$ServerURL"
  ScriptsPath: "$ScriptsDir"
  LoggingEnabled: true  # Enable logging to central storage
  LogLevel: "INFO"  # Minimum level for logs sent to central storage (DEBUG, INFO, WARNING, ERROR, CRITICAL)

EventMonitors:
  - Name: "AccountLoginMonitor"
    Type: "LogFileTail"
    LogFilePath: "./test_logs/bot.log"
    CheckIntervalSeconds: 1.0
    EventTriggers:
      - EventName: "AccountLoginDetected"
        # Regex to capture the account ID from a log line
        Regex: 'User logged in:\s+(?P<account_id>\w+)'
        # Action to perform when this regex matches
        Action: "UpdateProxyForAccount"

  - Name: "ErrorMonitor"
    Type: "LogFileTail"
    LogFilePath: "./test_logs/error.log"
    CheckIntervalSeconds: 1.0
    EventTriggers:
      - EventName: "CriticalErrorDetected"
        Regex: 'CRITICAL ERROR CODE: (?P<error_code>\d+)'
        Action: "NotifyError"  # Example: Could trigger a script that POSTs to manager

Actions:
  - Name: "UpdateProxyForAccount"
    # API endpoint to call to get data needed for the script
    APIDataEndpoint: "/windows-vm-agent/account-config?vm_id={VMIdentifier}&account_id={account_id}"  # Placeholders filled from event
    # Script to execute with data returned from API
    Script: "Set-Proxy.ps1"
    # Map API response fields to script parameters (case-sensitive)
    ParameterMapping:
      ProxyAddress: "proxy_server"  # Script param : API JSON key
      BypassList: "proxy_bypass"

  - Name: "NotifyError"
    # This action might not need external data, just runs a script
    Script: "Send-Notification.ps1"  # This script might contain API call logic itself
    # Map event capture groups directly to script parameters
    ParameterMapping:
      ErrorCode: "error_code"  # Script param : Regex capture group name

  - Name: "SendLog"
    # API endpoint to call to send logs
    APIDataEndpoint: "/windows-vm-agent/logs"  # No placeholders needed
    # Script to execute with data returned from API
    Script: "Send-Log.ps1"
    # Map event capture groups directly to script parameters
    ParameterMapping:
      Message: "message"  # Script param : Log message
"@

Set-Content -Path $ConfigPath -Value $configContent

# Install required Python packages
Write-Output "Installing required Python packages..."
try {
    python -m pip install --upgrade pip
    python -m pip install pyyaml requests
    Write-ColorOutput Green "Required Python packages installed successfully."
}
catch {
    Write-ColorOutput Red "Failed to install required Python packages: $_"
    exit 1
}

# Create a batch file to run the agent
$batchPath = Join-Path $InstallDir "run_agent.bat"
$batchContent = @"
@echo off
REM Run the Windows VM Agent
echo Starting Windows VM Agent...
cd "$InstallDir"
python run.py
"@

Set-Content -Path $batchPath -Value $batchContent

# Install as a service if requested
if ($InstallAsService) {
    Write-Output "Installing Windows VM Agent as a service..."

    # Download NSSM
    $nssmUrl = "https://nssm.cc/release/nssm-2.24.zip"
    $nssmZip = Join-Path $env:TEMP "nssm.zip"
    $nssmDir = Join-Path $env:TEMP "nssm"
    $nssmExe = Join-Path $nssmDir "nssm-2.24\win64\nssm.exe"

    try {
        # Download NSSM
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Invoke-WebRequest -Uri $nssmUrl -OutFile $nssmZip

        # Extract NSSM
        if (-not (Test-Path $nssmDir)) {
            New-Item -ItemType Directory -Path $nssmDir -Force | Out-Null
        }
        Expand-Archive -Path $nssmZip -DestinationPath $nssmDir -Force

        # Install the service
        $pythonPath = (Get-Command python).Source
        $mainScript = Join-Path $InstallDir "run.py"

        & $nssmExe install WindowsVMAgent $pythonPath """$mainScript"" --config ""$ConfigPath"" --log-dir ""$LogsDir"""
        & $nssmExe set WindowsVMAgent DisplayName "Windows VM Agent"
        & $nssmExe set WindowsVMAgent Description "Dynamic Windows VM Agent for monitoring and executing actions"
        & $nssmExe set WindowsVMAgent Start SERVICE_AUTO_START

        # Configure stdout/stderr logging
        $logFile = Join-Path $LogsDir "service.log"
        & $nssmExe set WindowsVMAgent AppStdout $logFile
        & $nssmExe set WindowsVMAgent AppStderr $logFile

        # Start the service
        & $nssmExe start WindowsVMAgent

        Write-ColorOutput Green "Windows VM Agent installed as a service successfully."
    }
    catch {
        Write-ColorOutput Red "Failed to install Windows VM Agent as a service: $_"
        Write-ColorOutput Yellow "You can still run the agent manually using the run_agent.bat file."
    }
}

Write-ColorOutput Green "
=============================================
Windows VM Agent Installation Complete!
=============================================

Installation Directory: $InstallDir
Configuration File: $ConfigPath
VM ID: $VMId
API Key: $APIKey
Server URL: $ServerURL

To run the agent manually, use the run_agent.bat file in the installation directory.
"

if (-not $InstallAsService) {
    Write-ColorOutput Yellow "
To install as a service later, run this script again with the -InstallAsService switch:
powershell -ExecutionPolicy Bypass -File $($MyInvocation.MyCommand.Path) -InstallAsService
"
}
