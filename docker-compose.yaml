services:
  frontend:
    build:
      context: ./frontend/.
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    ports:
      - ${FRONTEND_PORT:-8084}:3000
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      - api
      - postgres
    volumes:
      - ./frontend/nextjs:/app

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - ${API_PORT}:80
    depends_on:
      - postgres
    volumes:
      - ./backend:/app
      - api_logs:/app/logs

  postgres:
    image: postgres
    restart: always
    hostname: ${PG_HOST}
    env_file:
      - .env
    ports:
      - ${PG_PORT:-5432}:5432
    environment:
      POSTGRES_DB: accountdb
      POSTGRES_USER: ${SU_USER:?error}
      POSTGRES_PASSWORD: ${SU_PASSWORD:?error}
    volumes:
      - pgsql_data:/var/lib/postgresql/data
      - ./inits:/docker-entrypoint-initdb.d

  whodb:
    image: clidey/whodb
    depends_on:
      - postgres
    ports:
      - ${WHODB_PORT:-8085}:8080
    environment:
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: ${PG_USER:-acc_user}
      DB_PASSWORD: ${PG_PASSWORD:?error}
      DB_DATABASE: accountdb

volumes:
  pgsql_data:
  api_logs:
