# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  api:
    build:
      context: .
    env_file:
      - .env
    ports:
      - ${API_PORT}:80
    depends_on:
      - postgres

  postgres:
    image: postgres
    restart: always
    hostname: ${PG_HOST}
    env_file:
      - .env
    ports:
      - ${PG_PORT:-5432}:5432
    environment:
      POSTGRES_DB: accountdb
      POSTGRES_USER: ${PG_USER:-db_user}
      POSTGRES_PASSWORD: ${PG_PASSWORD:?error}
    volumes:
      - pgsql_data:/var/lib/postgresql/data 
      - ./inits:/docker-entrypoint-initdb.d

  whodb:
    image: clidey/whodb
    depends_on:
      - postgres
    ports:
      - ${WHODB_PORT:-8085}:8080
    environment:
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: ${PG_USER:-db_user}
      DB_PASSWORD: ${PG_PASSWORD:?error}
      DB_DATABASE: accountdb

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    depends_on:
      - postgres
    env_file:
      - .env
    ports:
      - ${PGADMIN_PORT:-8888}:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-user@domain.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:?error}
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  pgsql_data:
  pgadmin_data:
